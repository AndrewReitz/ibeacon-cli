{
  "author": {
    "name": "Sandeep Mistry",
    "email": "sandeep.mistry@gmail.com"
  },
  "name": "noble",
  "description": "A node.js BLE (Bluetooth low energy) central library.",
  "version": "0.2.8",
  "repository": {
    "type": "git",
    "url": "https://github.com/sandeepmistry/noble.git"
  },
  "bugs": {
    "url": "https://github.com/sandeepmistry/noble/issues"
  },
  "keywords": [
    "bluetooth",
    "BLE",
    "bluetooth low energy",
    "bluetooth smart",
    "central"
  ],
  "main": "./index.js",
  "engines": {
    "node": ">=0.8"
  },
  "os": [
    "darwin",
    "linux"
  ],
  "dependencies": {
    "debug": "~0.7.2"
  },
  "devDependencies": {
    "jshint": "latest",
    "mocha": "~1.8.2",
    "should": "~1.2.2",
    "sinon": "~1.6.0",
    "async": "~0.2.9"
  },
  "scripts": {
    "install": "node install.js",
    "pretest": "jshint *.js lib/. test/.",
    "test": "mocha -R spec test/*.js"
  },
  "readme": "noble\n=====\n\nA node.js BLE (Bluetooth low energy) central module.\n\nWant to implement a peripheral? Checkout [bleno](https://github.com/sandeepmistry/bleno)\n\n__Note:__ Mac OS X and Linux are currently the only supported OSes, and are still under development. Other platforms will be developed later on (see Roadmap below).\n\nPrerequisites\n------------\n\n__Linux (Ubuntu)__\n\n * ```sudo apt-get install libbluetooth-dev```\n * Run as ```sudo``` or ```root```\n\nInstall\n-------\n\n    npm install noble\n\nUsage\n-----\n\n    var noble = require('noble');\n\n__Actions__\n\nStart scanning:\n    \n    noble.startScanning(); // any service UUID, no duplicates\n\n\n    noble.startScanning([], true); // any service UUID, allow duplicates\n\n\n    var serviceUUIDs = [\"<service UUID 1>\", ...]; // default: [] => all\n    var allowDuplicates = <false|true>; // default: false\n\n    noble.startScanning(serviceUUIDs, allowDuplicates); // particular UUID's\n\nStop scanning:\n\n    noble.stopScanning();\n\nPeripheral connect:\n\n    peripheral.connect([callback(error)]);\n\nPeripheral disconnect or cancel pending connection:\n\n    peripheral.disconnect([callback(error)]);\n\nPeripheral update RSSI\n\n    peripheral.updateRssi([callback(error, rssi)]);\n\nPeripheral discover services\n\n    peripheral.discoverServices(); // any service UUID\n\n    var serviceUUIDs = [\"<service UUID 1>\", ...];\n    peripheral.discoverServices(serviceUUIDs[, callback(error, services)]); // particular UUID's\n\nPeripheral discover all services and characteristics\n\n    peripheral.discoverAllServicesAndCharacteristics([callback(error, services, characteristics));\n\nPeripheral discover some services and characteristics\n\n    var serviceUUIDs = [\"<service UUID 1>\", ...];\n    var characteristicUUIDs = [\"<characteristic UUID 1>\", ...];\n    peripheral.discoverSomeServicesAndCharacteristics(serviceUUIDs, characteristicUUIDs, [callback(error, services, characteristics));\n\nService discover included services\n\n    service.discoverIncludedServices(); // any service UUID\n\n    var serviceUUIDs = [\"<service UUID 1>\", ...];\n    service.discoverIncludedServices(serviceUUIDs[, callback(error, includedServiceUuids)]); // particular UUID's\n\nService discover characteristics\n\n    service.discoverCharacteristics() // any characteristic UUID\n\n    var characteristicUUIDs = [\"<characteristic UUID 1>\", ...];\n    service.discoverCharacteristics(characteristicUUIDs[, callback(error, characteristics)]); // particular UUID's\n\nCharacteristic read\n\n    characteristic.read([callback(error, data)]);\n\nCharacteristic write\n\n    characteristic.write(data, notify[, callback(error)]); // data is a buffer, notify is true|false\n\nCharacteristic broadcast\n\n    characteristic.broadcast(broadcast[, callback(error)]); // broadcast is true|false\n\nCharacteristic notify\n\n    characteristic.notify(notify[, callback(error)]); // notify is true|false\n\nCharacteristic discover descriptors\n\n    characteristic.discoverDescriptors([callback(error, descriptors)]);\n\nDescriptor read value\n\n    descriptor.readValue([callback(error, data)]);\n\nDescriptor write value\n\n    descriptor.writeValue(data[, callback(error)]); // data is a buffer\n\n__Events__\n\nAdapter state change:\n\n    state = <\"unknown\" | \"resetting\" | \"unsupported\" | \"unauthorized\" | \"poweredOff\" | \"poweredOn\">\n\n    noble.on('stateChange', callback(state));\n\nScan started:\n\n    noble.on('scanStart', callback);\n\nScan stopped:\n\n    noble.on('scanStop', callback);\n\nPeripheral discovered:\n\n    peripheral = {\n      uuid: \"<uuid>\",\n      advertisement: {\n        localName: \"<name>\",\n        serviceData: <Buffer>,\n        txPowerLevel: <int>,\n        serviceUuids: [\"<service UUID>\", ...],\n      },\n      rssi: <rssi>\n    };\n\n    noble.on('discover', callback(peripheral));\n\nPeripheral connected:\n\n    peripheral.on('connect', callback);\n\nPeripheral disconnected:\n\n    peripheral.on('disconnect', callback);\n\nPeripheral RSSI update\n\n    peripheral.on('rssiUpdate', callback(rssi));\n\nPeripheral services discovered\n\n    peripheral.on('servicesDiscover', callback(services));\n\nService included services discovered\n\n    service.on('includedServicesDiscover', callback(includedServiceUuids));\n\nService characteristics discovered\n\n    characteristic = {\n      uuid: \"<uuid>\",\n       // properties: 'broadcast', 'read', 'writeWithoutResponse', 'write', 'notify', 'indicate', 'authenticatedSignedWrites', 'extendedProperties'\n      properties: [...]\n    };\n\n    service.on('characteristicsDiscover', callback(characteristics));\n\nCharacteristic read\n\n    characteristic.on('read', callback(data, isNotification));\n\nCharacteristic write\n\n    characteristic.on('write', withoutResponse, callback());\n\nCharacteristic broadcast\n\n    characteristic.on('broadcast', callback(state));\n\nCharacteristic notify\n\n    characteristic.on('notify', callback(state));\n\nCharacteristic descriptors discovered\n\n    descriptor = {\n      uuid: '<uuid>'\n    };\n\n    characteristic.on('descriptorsDiscover', callback(descriptors));\n\nDescriptor value read\n\n    descriptor.on('valueRead', data);\n\nDescriptor value write\n\n    descriptor.on('valueWrite');\n\nRead handle\n\n    peripheral.readHandle(handle, callback(error, data));\n\nWrite handle\n\n    peripheral.writeHandle(handle, data, withoutResponse, callback(error));\n\nRunning on Linux\n-----------------\nMust be run with ```sudo``` or as root user.\n\n```hci0``` is used by default to override set the ```NOBLE_HCI_DEVICE_ID``` environment variable to the interface number.\n\nExample, specify ```hci1```:\n\n    sudo NOBLE_HCI_DEVICE_ID=1 node <your file>.js\n\nRoadmap (TODO)\n--------------\n\n * Mac OS X:\n   * ~~Adapter state (unknown | reseting | unsupported | unauthorized | off | on)~~\n   * ~~Scan~~\n      * ~~startScanning~~\n         * ~~service UUID's~~\n         * ~~allow duplicates~~\n      * ~~stopScanning~~\n   * ~~Peripheral~~\n     * ~~discovered~~\n     * ~~connect~~\n     * ~~disconnect/cancel connect~~\n     * ~~update RSSI~~\n     * ~~services~~\n         * ~~discover~~\n         * ~~disover included~~\n         * ~~discover characteristics for services~~\n     * ~~characteristics~~\n         * ~~read~~\n         * ~~write~~\n         * ~~set broadcast value~~\n         * ~~set notify value~~\n         * ~~descriptors~~\n             * ~~discover~~\n             * ~~read~~\n             * ~~write~~\n     * ~~handle~~\n         * ~~read~~\n         * ~~write~~\n             * ~~with response~~\n             * without response\n   * error handling\n\n * Linux\n   * ~~Adapter state (unsupported | unauthorized | off | on)~~\n   * ~~Scan~~\n      * ~~startScanning~~\n         * ~~service UUID's~~\n         * ~~allow duplicates~~\n      * ~~stopScanning~~\n   * ~~Peripheral~~\n     * ~~discovered~~\n     * ~~connect~~\n         * ~~public address~~\n         * ~~random address~~\n     * ~~disconnect/cancel connect~~\n     * ~~update RSSI~~\n     * ~~services~~\n         * ~~discover~~\n             * ~~filter by uuid~~\n         * ~~discover included~~\n         * ~~discover characteristics for services~~\n             * ~~filter by uuid~~\n     * ~~characteristics~~\n         * ~~read~~\n         * ~~write~~\n         * ~~set broadcast value~~\n         * ~~set notify value~~\n         * ~~descriptors~~\n             * ~~discover~~\n             * ~~read~~\n             * ~~write~~\n     * ~~handle~~\n         * ~~read~~\n         * ~~write~~\n             * ~~with response~~\n             * ~~without response~~\n   * error handling\n * Windows\n   * TDB (most likely Windows 8 only)\n\nUseful Links\n------------\n\n * [Bluetooth Development Portal](http://developer.bluetooth.org)\n   * [GATT Specifications](http://developer.bluetooth.org/gatt/Pages/default.aspx)\n * [Bluetooth: ATT and GATT](http://epx.com.br/artigos/bluetooth_gatt.php)\n   \nLicense\n========\n\nCopyright (C) 2013 Sandeep Mistry <sandeep.mistry@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "noble@0.2.8",
  "_from": "noble@~0.2.7"
}
