{
  "name": "bleno",
  "version": "0.1.4",
  "description": "A node.js module for implementing BLE (Bluetooth low energy) peripherals",
  "main": "index.js",
  "engines": {
    "node": ">=0.8"
  },
  "os": [
    "darwin",
    "linux"
  ],
  "scripts": {
    "install": "node install.js",
    "pretest": "jshint *.js lib/. test/. examples/.",
    "test": "mocha -R spec test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sandeepmistry/bleno"
  },
  "keywords": [
    "BLE",
    "Bluetooth",
    "Bluetooth Low Energy",
    "Bluetooth Smart",
    "peripheral"
  ],
  "author": {
    "name": "Sandeep Mistry"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "devDependencies": {
    "jshint": "~2.3.0",
    "should": "~2.0.2",
    "mocha": "~1.14.0",
    "node-blink1": "~0.1.1"
  },
  "dependencies": {
    "debug": "~0.7.2"
  },
  "readme": "bleno\n=====\n\nA node.js module for implementing BLE (Bluetooth low energy) peripherals.\n\nNeed a BLE central module? See [noble](https://github.com/sandeepmistry/noble).\n\n__Note:__ Mac OS X and Linux are currently the only supported OSes, and are still under development. Other platforms will be developed later on (see Roadmap below).\n\nPrerequisites\n------------\n\n__Linux (Ubuntu)__\n\n * ```sudo apt-get install libbluetooth-dev```\n * Run as ```sudo``` or ```root```\n\n__OS X__\n\n * 10.9 or later\n\nInstall\n-------\n\n    npm install bleno\n\nUsage\n-----\n\n    var bleno = require('bleno');\n    \nSee [examples folder](https://github.com/sandeepmistry/bleno/blob/master/examples) for code examples.\n\n__Actions__\n\nStart advertising:\n    \n    var name = 'name';\n    var serviceUuids = ['fffffffffffffffffffffffffffffff0']\n\n    bleno.startAdvertising(name, serviceUuids[, callback(error)]);\n\n __Note:__: there are limits on the name and service UUID's\n\n  * name\n    * maximum 26 bytes\n  * service UUID's\n    * 1 128-bit service UUID\n    * 1 128-bit service UUID + 2 16-bit service UUID's\n    * 7 16-bit service UUID\n\n\nStart advertising iBeacon:\n    \n    var uuid = 'e2c56db5dffb48d2b060d0f5a71096e0';\n    var major = 0; // 0x0000 - 0xffff\n    var minor = 0; // 0x0000 - 0xffff\n    var measuredPower = -59; // -128 - 127\n\n    bleno.startAdvertisingIBeacon(uuid, major, minor, measuredPower[, callback(error)]);\n\n __Note:__: on OS X, in iBeacon mode your peripheral is non-connectable!\n\nStart advertising with EIR data (__Linux only__):\n\n    var scanData = new Buffer(...); // maximum 31 bytes\n    var advertisementData = new Buffer(...); // maximum 31 bytes\n\n    bleno.startAdvertisingWithEIRData(advertisementData, scanData[, callback(error)]);\n\n  * For EIR format section [Bluetooth Core Specification](https://www.bluetooth.org/docman/handlers/downloaddoc.ashx?doc_id=229737) sections and 8 and 18 for more information the data format.\n\nStop advertising:\n\n    bleno.stopAdvertising([callback]);\n\nSet services:\n\n    var services = [\n       ... // see PrimaryService for data type\n    ];\n\n    bleno.setServices(services[, callback(error)]);\n\nDisconnect client:\n\n    bleno.disconnect(); // Linux only\n\nUpdate RSSI:\n\n    bleno.updateRssi([callback(error, rssi)]); // Linux only\n\n__Primary Service__\n\n    var PrimaryService = bleno.PrimaryService;\n\n    var primaryService = new PrimaryService({\n        uuid: 'fffffffffffffffffffffffffffffff0', // or 'fff0' for 16-bit\n        characteristics: [\n            // see Characteristic for data type\n        ]\n    });\n\n__Characteristic__\n\n    var Characteristic = bleno.Characteristic;\n\n    var characteristic = new Characteristic({\n        uuid: 'fffffffffffffffffffffffffffffff1', // or 'fff1' for 16-bit\n        properties: [ ... ], // can be a combination of 'read', 'write', 'writeWithoutResponse', 'notify'\n        secure: [ ... ], // enable security for properties, can be a combination of 'read', 'write', 'writeWithoutResponse', 'notify'\n        value: null, // optional static value, must be of type Buffer\n        descriptors: [\n            // see Descriptor for data type\n        ],\n        onReadRequest: null, // optional read request handler, function(offset, callback) { ... }\n        onWriteRequest: null, // optional write request handler, function(data, offset, withoutResponse, callback) { ...}\n        onSubscribe: null, // optional notify subscribe handler, function(maxValueSize, updateValueCallback) { ...}\n        onUnsubscribe: null, // optional notify unsubscribe handler, function() { ...}\n        onNotify: null // optional notify sent handler, function() { ...}\n    });\n\nResult codes:\n\n  * Characteristic.RESULT_SUCCESS\n  * Characteristic.RESULT_INVALID_OFFSET\n  * Characteristic.RESULT_INVALID_ATTRIBUTE_LENGTH\n  * Characteristic.RESULT_UNLIKELY_ERROR\n\nRead requests:\n\nCan specify read request handler via constructor options or by extending Characteristic and overriding onReadRequest.\n\nParameters to handler are\n  * ```offset``` (0x0000 - 0xffff)\n  * ```callback```\n\n\n```callback``` must be called with result and data (of type ```Buffer```) - can be async.\n\n    var result = Characteristic.RESULT_SUCCESS;\n    var data = new Buffer( ... );\n\n    callback(result, data);\n\nWrite requests:\n\nCan specify write request handler via constructor options or by extending Characteristic and overriding onWriteRequest.\n\nParameters to handler are\n  * ```data``` (Buffer)\n  * ```offset``` (0x0000 - 0xffff)\n  * ```withoutResponse``` (true | false)\n  * ```callback```.\n\n```callback``` must be called with result code - can be async.\n\n    var result = Characteristic.RESULT_SUCCESS;\n\n    callback(result);\n\nNotify subscribe:\n\nCan specify notify subscribe handler via constructor options or by extending Characteristic and overriding onSubscribe.\n\nParameters to handler are\n  * ```maxValueSize``` (maximum data size)\n  * ```updateValueCallback``` (callback to call when value has changed)\n\nNotify unsubscribe:\n\nCan specify notify unsubscribe handler via constructor options or by extending Characteristic and overriding onUnsubscribe.\n\nNotify value changes:\n\nCall the ```updateValueCallback``` callback (see Notify subcribe), with an argument of type ```Buffer```\n\nCan specify notify sent handler via constructor options or by extending Characteristic and overriding onNotify.\n\n__Descriptor__\n\n    var Descriptor = bleno.Descriptor;\n\n    var descriptor = new Descriptor({\n        uuid: '2901',\n        value: 'value' // static value, must be of type Buffer or string if set\n    });\n\n__Events__\n\nAdapter state change:\n\n    state = <\"unknown\" | \"resetting\" | \"unsupported\" | \"unauthorized\" | \"poweredOff\" | \"poweredOn\">\n\n    bleno.on('stateChange', callback(state));\n\nAdvertisement started:\n\n    bleno.on('advertisingStart', callback(error));\n\n    bleno.on('advertisingStartError', callback(error));\n\nAdvertisement stopped:\n\n    bleno.on('advertisingStop', callback);\n\nServices set:\n\n    bleno.on('servicesSet', callback);\n\nAccept:\n\n    bleno.on('accept', callback); // Linux only\n\nDisconnect:\n\n    bleno.on('disconnct', callback); // Linux only\n\nRSSI Update:\n\n    bleno.on('rssiUpdate', callback(rssi)); // Linux only\n\nRunning on Linux\n-----------------\nMust be run with ```sudo``` or as root user.\n\n```hci0``` is used by default to override set the ```BLENO_HCI_DEVICE_ID``` environment variable to the interface number.\n\nExample, specify ```hci1```:\n\n    sudo BLENO_HCI_DEVICE_ID=1 node <your file>.js\n\nRoadmap (TODO)\n--------------\n\n * Mac OS X:\n   * ~~Adapter state (unknown | reseting | unsupported | unauthorized | off | on)~~\n   * ~~Advertisement~~\n      * ~~startAdvertising~~\n         * ~~name~~\n         * ~~service UUID's~~\n      * ~~startAdvertisingIBeacon~~\n      * ~~stopAdvertising~~\n   * ~~Services~~\n      * ~~UUID~~\n      * ~~Characteristics~~\n         * ~~UUID~~\n         * ~~properties~~\n           * ~~read (static, dynamic)~~\n           * ~~write~~\n           * ~~write without response~~\n           * ~~notify (subscribe, unsubscribe, value changed)~~\n           * broadcast (not possible)\n           * ~~indicate~~\n           * secure (not functioning, OS X issues)\n              * read\n              * write\n         * ~~Descriptors~~\n           * ~~UUID~~\n           * ~~read (static)~~\n           * write (not possible)\n      * Included Services (maybe ?)\n   * error handling\n\n * Linux\n   * ~~Adapter state (unsupported | unauthorized | off | on)~~\n   * ~~Advertisement~~\n      * ~~startAdvertising~~\n         * ~~name~~\n         * ~~service UUID's~~\n      * ~~startAdvertisingIBeacon~~\n      * ~~stopAdvertising~~\n   * ~~Services~~\n      * ~~UUID~~\n      * ~~Characteristics~~\n         * ~~UUID~~\n         * ~~properties~~\n           * ~~read (static, dynamic)~~\n           * ~~write~~\n           * ~~write without response~~\n           * ~~notify (subscribe, unsubscribe, value changed)~~\n           * broadcast (maybe ?)\n           * indicate (maybe ?)\n           * ~~secure~~\n               * ~~read~~\n               * ~~write~~\n         * ~~Descriptors~~\n           * ~~UUID~~\n           * ~~read (static)~~\n           * write (maybe ?)\n      * Included Services (maybe ?)\n   * error handling\n * Windows\n   * TDB (most likely Windows 8 only)\n\nUseful tools/links\n==================\n\n * Tools\n   * LightBlue for [iOS](https://itunes.apple.com/us/app/lightblue/id557428110)/[OS X](https://itunes.apple.com/us/app/lightblue/id639944780)\n   * [nRF Master Control Panel (BLE)](https://play.google.com/store/apps/details?id=no.nordicsemi.android.mcp&hl=en) for Android\n   * [hcitool](http://linux.die.net/man/1/hcitool) and ```gatttool``` by [BlueZ](http://www.bluez.org) for Linux\n\n\n   \nLicense\n========\n\nCopyright (C) 2013 Sandeep Mistry <sandeep.mistry@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "bugs": {
    "url": "https://github.com/sandeepmistry/bleno/issues"
  },
  "_id": "bleno@0.1.4",
  "_from": "bleno@~0.1.0"
}
